// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:mlmdiary/generated/add_answer_entity.dart';
import 'package:mlmdiary/generated/add_blog_entity.dart';
import 'package:mlmdiary/generated/add_news_entity.dart';
import 'package:mlmdiary/generated/add_post_entity.dart';
import 'package:mlmdiary/generated/blog_bookmark_entity.dart';
import 'package:mlmdiary/generated/blog_like_list_entity.dart';
import 'package:mlmdiary/generated/bookmark_company_entity.dart';
import 'package:mlmdiary/generated/bookmark_news_entity.dart';
import 'package:mlmdiary/generated/bookmark_user_entity.dart';
import 'package:mlmdiary/generated/change_email_entity.dart';
import 'package:mlmdiary/generated/change_password_entity.dart';
import 'package:mlmdiary/generated/classified_like_list_entity.dart';
import 'package:mlmdiary/generated/count_view_question_entity.dart';
import 'package:mlmdiary/generated/delete_classified_entity.dart';
import 'package:mlmdiary/generated/delete_news_entity.dart';
import 'package:mlmdiary/generated/delete_user_post_entity.dart';
import 'package:mlmdiary/generated/domestic_phoneotp_entity.dart';
import 'package:mlmdiary/generated/email_otp_entity.dart';
import 'package:mlmdiary/generated/email_verify_entity.dart';
import 'package:mlmdiary/generated/email_verify_otp_entity.dart';
import 'package:mlmdiary/generated/foreignphone_otp_entity.dart';
import 'package:mlmdiary/generated/forgot_password_entity.dart';
import 'package:mlmdiary/generated/get_admin_company_entity.dart';
import 'package:mlmdiary/generated/get_answers_entity.dart';
import 'package:mlmdiary/generated/get_banner_entity.dart';
import 'package:mlmdiary/generated/get_blog_list_entity.dart';
import 'package:mlmdiary/generated/get_category_entity.dart';
import 'package:mlmdiary/generated/get_classified_entity.dart';
import 'package:mlmdiary/generated/get_company_entity.dart';
import 'package:mlmdiary/generated/get_mlm_database_entity.dart';
import 'package:mlmdiary/generated/get_news_list_entity.dart';
import 'package:mlmdiary/generated/get_plan_list_entity.dart';
import 'package:mlmdiary/generated/get_question_list_entity.dart';
import 'package:mlmdiary/generated/get_sub_category_entity.dart';
import 'package:mlmdiary/generated/get_user_profile_entity.dart';
import 'package:mlmdiary/generated/get_user_type_entity.dart';
import 'package:mlmdiary/generated/get_video_list_entity.dart';
import 'package:mlmdiary/generated/l_iked_blog_entity.dart';
import 'package:mlmdiary/generated/liked_news_entity.dart';
import 'package:mlmdiary/generated/liked_user_entity.dart';
import 'package:mlmdiary/generated/login_entity.dart';
import 'package:mlmdiary/generated/manage_classified_entity.dart';
import 'package:mlmdiary/generated/mlm_like_company_entity.dart';
import 'package:mlmdiary/generated/my_blog_list_entity.dart';
import 'package:mlmdiary/generated/my_news_entity.dart';
import 'package:mlmdiary/generated/my_post_list_entity.dart';
import 'package:mlmdiary/generated/my_question_entity.dart';
import 'package:mlmdiary/generated/news_like_list_entity.dart';
import 'package:mlmdiary/generated/post_bookmark_entity.dart';
import 'package:mlmdiary/generated/post_like_entity.dart';
import 'package:mlmdiary/generated/post_like_list_entity.dart';
import 'package:mlmdiary/generated/question_like_list_entity.dart';
import 'package:mlmdiary/generated/remaining_classified_count_entity.dart';
import 'package:mlmdiary/generated/resent_otp_register_entity.dart';
import 'package:mlmdiary/generated/save_classified_entity.dart';
import 'package:mlmdiary/generated/save_company_entity.dart';
import 'package:mlmdiary/generated/termsand_condition_entity.dart';
import 'package:mlmdiary/generated/update_blog_entity.dart';
import 'package:mlmdiary/generated/update_classified_entity.dart';
import 'package:mlmdiary/generated/update_news_entity.dart';
import 'package:mlmdiary/generated/update_phone_no_entity.dart';
import 'package:mlmdiary/generated/update_phone_verify_otp_entity.dart';
import 'package:mlmdiary/generated/update_post_entity.dart';
import 'package:mlmdiary/generated/update_social_media_entity.dart';
import 'package:mlmdiary/generated/update_user_profile_entity.dart';
import 'package:mlmdiary/generated/user_register_entity_entity.dart';
import 'package:mlmdiary/generated/verify_phone_otp_entity.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        return convertFuncMap[type]!(value as Map<String, dynamic>) as T;
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AddAnswerEntity>[] is M) {
      return data.map<AddAnswerEntity>((Map<String, dynamic> e) =>
          AddAnswerEntity.fromJson(e)).toList() as M;
    }
    if (<AddAnswerAnswer>[] is M) {
      return data.map<AddAnswerAnswer>((Map<String, dynamic> e) =>
          AddAnswerAnswer.fromJson(e)).toList() as M;
    }
    if (<AddBlogEntity>[] is M) {
      return data.map<AddBlogEntity>((Map<String, dynamic> e) =>
          AddBlogEntity.fromJson(e)).toList() as M;
    }
    if (<AddBlogData>[] is M) {
      return data.map<AddBlogData>((Map<String, dynamic> e) =>
          AddBlogData.fromJson(e)).toList() as M;
    }
    if (<AddNewsEntity>[] is M) {
      return data.map<AddNewsEntity>((Map<String, dynamic> e) =>
          AddNewsEntity.fromJson(e)).toList() as M;
    }
    if (<AddNewsData>[] is M) {
      return data.map<AddNewsData>((Map<String, dynamic> e) =>
          AddNewsData.fromJson(e)).toList() as M;
    }
    if (<AddPostEntity>[] is M) {
      return data.map<AddPostEntity>((Map<String, dynamic> e) =>
          AddPostEntity.fromJson(e)).toList() as M;
    }
    if (<AddPostUserpost>[] is M) {
      return data.map<AddPostUserpost>((Map<String, dynamic> e) =>
          AddPostUserpost.fromJson(e)).toList() as M;
    }
    if (<BlogBookmarkEntity>[] is M) {
      return data.map<BlogBookmarkEntity>((Map<String, dynamic> e) =>
          BlogBookmarkEntity.fromJson(e)).toList() as M;
    }
    if (<BlogLikeListEntity>[] is M) {
      return data.map<BlogLikeListEntity>((Map<String, dynamic> e) =>
          BlogLikeListEntity.fromJson(e)).toList() as M;
    }
    if (<BlogLikeListData>[] is M) {
      return data.map<BlogLikeListData>((Map<String, dynamic> e) =>
          BlogLikeListData.fromJson(e)).toList() as M;
    }
    if (<BlogLikeListDataUserData>[] is M) {
      return data.map<BlogLikeListDataUserData>((Map<String, dynamic> e) =>
          BlogLikeListDataUserData.fromJson(e)).toList() as M;
    }
    if (<BookmarkCompanyEntity>[] is M) {
      return data.map<BookmarkCompanyEntity>((Map<String, dynamic> e) =>
          BookmarkCompanyEntity.fromJson(e)).toList() as M;
    }
    if (<BookmarkNewsEntity>[] is M) {
      return data.map<BookmarkNewsEntity>((Map<String, dynamic> e) =>
          BookmarkNewsEntity.fromJson(e)).toList() as M;
    }
    if (<BookmarkUserEntity>[] is M) {
      return data.map<BookmarkUserEntity>((Map<String, dynamic> e) =>
          BookmarkUserEntity.fromJson(e)).toList() as M;
    }
    if (<ChangeEmailEntity>[] is M) {
      return data.map<ChangeEmailEntity>((Map<String, dynamic> e) =>
          ChangeEmailEntity.fromJson(e)).toList() as M;
    }
    if (<ChangePasswordEntity>[] is M) {
      return data.map<ChangePasswordEntity>((Map<String, dynamic> e) =>
          ChangePasswordEntity.fromJson(e)).toList() as M;
    }
    if (<ClassifiedLikeListEntity>[] is M) {
      return data.map<ClassifiedLikeListEntity>((Map<String, dynamic> e) =>
          ClassifiedLikeListEntity.fromJson(e)).toList() as M;
    }
    if (<ClassifiedLikeListData>[] is M) {
      return data.map<ClassifiedLikeListData>((Map<String, dynamic> e) =>
          ClassifiedLikeListData.fromJson(e)).toList() as M;
    }
    if (<ClassifiedLikeListDataUserData>[] is M) {
      return data.map<ClassifiedLikeListDataUserData>((
          Map<String, dynamic> e) => ClassifiedLikeListDataUserData.fromJson(e))
          .toList() as M;
    }
    if (<CountViewQuestionEntity>[] is M) {
      return data.map<CountViewQuestionEntity>((Map<String, dynamic> e) =>
          CountViewQuestionEntity.fromJson(e)).toList() as M;
    }
    if (<DeleteClassifiedEntity>[] is M) {
      return data.map<DeleteClassifiedEntity>((Map<String, dynamic> e) =>
          DeleteClassifiedEntity.fromJson(e)).toList() as M;
    }
    if (<DeleteNewsEntity>[] is M) {
      return data.map<DeleteNewsEntity>((Map<String, dynamic> e) =>
          DeleteNewsEntity.fromJson(e)).toList() as M;
    }
    if (<DeleteUserPostEntity>[] is M) {
      return data.map<DeleteUserPostEntity>((Map<String, dynamic> e) =>
          DeleteUserPostEntity.fromJson(e)).toList() as M;
    }
    if (<DomesticPhoneotpEntity>[] is M) {
      return data.map<DomesticPhoneotpEntity>((Map<String, dynamic> e) =>
          DomesticPhoneotpEntity.fromJson(e)).toList() as M;
    }
    if (<EmailOtpEntity>[] is M) {
      return data.map<EmailOtpEntity>((Map<String, dynamic> e) =>
          EmailOtpEntity.fromJson(e)).toList() as M;
    }
    if (<EmailVerifyEntity>[] is M) {
      return data.map<EmailVerifyEntity>((Map<String, dynamic> e) =>
          EmailVerifyEntity.fromJson(e)).toList() as M;
    }
    if (<EmailVerifyOtpEntity>[] is M) {
      return data.map<EmailVerifyOtpEntity>((Map<String, dynamic> e) =>
          EmailVerifyOtpEntity.fromJson(e)).toList() as M;
    }
    if (<ForeignphoneOtpEntity>[] is M) {
      return data.map<ForeignphoneOtpEntity>((Map<String, dynamic> e) =>
          ForeignphoneOtpEntity.fromJson(e)).toList() as M;
    }
    if (<ForgotPasswordEntity>[] is M) {
      return data.map<ForgotPasswordEntity>((Map<String, dynamic> e) =>
          ForgotPasswordEntity.fromJson(e)).toList() as M;
    }
    if (<GetAdminCompanyEntity>[] is M) {
      return data.map<GetAdminCompanyEntity>((Map<String, dynamic> e) =>
          GetAdminCompanyEntity.fromJson(e)).toList() as M;
    }
    if (<GetAdminCompanyData>[] is M) {
      return data.map<GetAdminCompanyData>((Map<String, dynamic> e) =>
          GetAdminCompanyData.fromJson(e)).toList() as M;
    }
    if (<GetAnswersEntity>[] is M) {
      return data.map<GetAnswersEntity>((Map<String, dynamic> e) =>
          GetAnswersEntity.fromJson(e)).toList() as M;
    }
    if (<GetAnswersAnswers>[] is M) {
      return data.map<GetAnswersAnswers>((Map<String, dynamic> e) =>
          GetAnswersAnswers.fromJson(e)).toList() as M;
    }
    if (<GetAnswersAnswersUserData>[] is M) {
      return data.map<GetAnswersAnswersUserData>((Map<String, dynamic> e) =>
          GetAnswersAnswersUserData.fromJson(e)).toList() as M;
    }
    if (<GetBannerEntity>[] is M) {
      return data.map<GetBannerEntity>((Map<String, dynamic> e) =>
          GetBannerEntity.fromJson(e)).toList() as M;
    }
    if (<GetBannerData>[] is M) {
      return data.map<GetBannerData>((Map<String, dynamic> e) =>
          GetBannerData.fromJson(e)).toList() as M;
    }
    if (<GetBlogListEntity>[] is M) {
      return data.map<GetBlogListEntity>((Map<String, dynamic> e) =>
          GetBlogListEntity.fromJson(e)).toList() as M;
    }
    if (<GetBlogListData>[] is M) {
      return data.map<GetBlogListData>((Map<String, dynamic> e) =>
          GetBlogListData.fromJson(e)).toList() as M;
    }
    if (<GetBlogListDataUserData>[] is M) {
      return data.map<GetBlogListDataUserData>((Map<String, dynamic> e) =>
          GetBlogListDataUserData.fromJson(e)).toList() as M;
    }
    if (<GetCategoryEntity>[] is M) {
      return data.map<GetCategoryEntity>((Map<String, dynamic> e) =>
          GetCategoryEntity.fromJson(e)).toList() as M;
    }
    if (<GetCategoryCategory>[] is M) {
      return data.map<GetCategoryCategory>((Map<String, dynamic> e) =>
          GetCategoryCategory.fromJson(e)).toList() as M;
    }
    if (<GetClassifiedEntity>[] is M) {
      return data.map<GetClassifiedEntity>((Map<String, dynamic> e) =>
          GetClassifiedEntity.fromJson(e)).toList() as M;
    }
    if (<GetClassifiedData>[] is M) {
      return data.map<GetClassifiedData>((Map<String, dynamic> e) =>
          GetClassifiedData.fromJson(e)).toList() as M;
    }
    if (<GetClassifiedDataUserData>[] is M) {
      return data.map<GetClassifiedDataUserData>((Map<String, dynamic> e) =>
          GetClassifiedDataUserData.fromJson(e)).toList() as M;
    }
    if (<GetCompanyEntity>[] is M) {
      return data.map<GetCompanyEntity>((Map<String, dynamic> e) =>
          GetCompanyEntity.fromJson(e)).toList() as M;
    }
    if (<GetMlmDatabaseEntity>[] is M) {
      return data.map<GetMlmDatabaseEntity>((Map<String, dynamic> e) =>
          GetMlmDatabaseEntity.fromJson(e)).toList() as M;
    }
    if (<GetMlmDatabaseData>[] is M) {
      return data.map<GetMlmDatabaseData>((Map<String, dynamic> e) =>
          GetMlmDatabaseData.fromJson(e)).toList() as M;
    }
    if (<GetNewsListEntity>[] is M) {
      return data.map<GetNewsListEntity>((Map<String, dynamic> e) =>
          GetNewsListEntity.fromJson(e)).toList() as M;
    }
    if (<GetNewsListData>[] is M) {
      return data.map<GetNewsListData>((Map<String, dynamic> e) =>
          GetNewsListData.fromJson(e)).toList() as M;
    }
    if (<GetNewsListDataUserData>[] is M) {
      return data.map<GetNewsListDataUserData>((Map<String, dynamic> e) =>
          GetNewsListDataUserData.fromJson(e)).toList() as M;
    }
    if (<GetPlanListEntity>[] is M) {
      return data.map<GetPlanListEntity>((Map<String, dynamic> e) =>
          GetPlanListEntity.fromJson(e)).toList() as M;
    }
    if (<GetPlanListPlan>[] is M) {
      return data.map<GetPlanListPlan>((Map<String, dynamic> e) =>
          GetPlanListPlan.fromJson(e)).toList() as M;
    }
    if (<GetQuestionListEntity>[] is M) {
      return data.map<GetQuestionListEntity>((Map<String, dynamic> e) =>
          GetQuestionListEntity.fromJson(e)).toList() as M;
    }
    if (<GetQuestionListQuestions>[] is M) {
      return data.map<GetQuestionListQuestions>((Map<String, dynamic> e) =>
          GetQuestionListQuestions.fromJson(e)).toList() as M;
    }
    if (<GetQuestionListQuestionsUserData>[] is M) {
      return data.map<GetQuestionListQuestionsUserData>((
          Map<String, dynamic> e) =>
          GetQuestionListQuestionsUserData.fromJson(e)).toList() as M;
    }
    if (<GetSubCategoryEntity>[] is M) {
      return data.map<GetSubCategoryEntity>((Map<String, dynamic> e) =>
          GetSubCategoryEntity.fromJson(e)).toList() as M;
    }
    if (<GetSubCategoryCategory>[] is M) {
      return data.map<GetSubCategoryCategory>((Map<String, dynamic> e) =>
          GetSubCategoryCategory.fromJson(e)).toList() as M;
    }
    if (<GetUserProfileEntity>[] is M) {
      return data.map<GetUserProfileEntity>((Map<String, dynamic> e) =>
          GetUserProfileEntity.fromJson(e)).toList() as M;
    }
    if (<GetUserProfileUserProfile>[] is M) {
      return data.map<GetUserProfileUserProfile>((Map<String, dynamic> e) =>
          GetUserProfileUserProfile.fromJson(e)).toList() as M;
    }
    if (<GetUserTypeEntity>[] is M) {
      return data.map<GetUserTypeEntity>((Map<String, dynamic> e) =>
          GetUserTypeEntity.fromJson(e)).toList() as M;
    }
    if (<GetUserTypeUsertype>[] is M) {
      return data.map<GetUserTypeUsertype>((Map<String, dynamic> e) =>
          GetUserTypeUsertype.fromJson(e)).toList() as M;
    }
    if (<GetVideoListEntity>[] is M) {
      return data.map<GetVideoListEntity>((Map<String, dynamic> e) =>
          GetVideoListEntity.fromJson(e)).toList() as M;
    }
    if (<GetVideoListVideos>[] is M) {
      return data.map<GetVideoListVideos>((Map<String, dynamic> e) =>
          GetVideoListVideos.fromJson(e)).toList() as M;
    }
    if (<LIkedBlogEntity>[] is M) {
      return data.map<LIkedBlogEntity>((Map<String, dynamic> e) =>
          LIkedBlogEntity.fromJson(e)).toList() as M;
    }
    if (<LikedNewsEntity>[] is M) {
      return data.map<LikedNewsEntity>((Map<String, dynamic> e) =>
          LikedNewsEntity.fromJson(e)).toList() as M;
    }
    if (<LikedUserEntity>[] is M) {
      return data.map<LikedUserEntity>((Map<String, dynamic> e) =>
          LikedUserEntity.fromJson(e)).toList() as M;
    }
    if (<LoginEntity>[] is M) {
      return data.map<LoginEntity>((Map<String, dynamic> e) =>
          LoginEntity.fromJson(e)).toList() as M;
    }
    if (<ManageClassifiedEntity>[] is M) {
      return data.map<ManageClassifiedEntity>((Map<String, dynamic> e) =>
          ManageClassifiedEntity.fromJson(e)).toList() as M;
    }
    if (<ManageClassifiedData>[] is M) {
      return data.map<ManageClassifiedData>((Map<String, dynamic> e) =>
          ManageClassifiedData.fromJson(e)).toList() as M;
    }
    if (<ManageClassifiedDataUserData>[] is M) {
      return data.map<ManageClassifiedDataUserData>((Map<String, dynamic> e) =>
          ManageClassifiedDataUserData.fromJson(e)).toList() as M;
    }
    if (<MlmLikeCompanyEntity>[] is M) {
      return data.map<MlmLikeCompanyEntity>((Map<String, dynamic> e) =>
          MlmLikeCompanyEntity.fromJson(e)).toList() as M;
    }
    if (<MyBlogListEntity>[] is M) {
      return data.map<MyBlogListEntity>((Map<String, dynamic> e) =>
          MyBlogListEntity.fromJson(e)).toList() as M;
    }
    if (<MyBlogListData>[] is M) {
      return data.map<MyBlogListData>((Map<String, dynamic> e) =>
          MyBlogListData.fromJson(e)).toList() as M;
    }
    if (<MyBlogListDataUserData>[] is M) {
      return data.map<MyBlogListDataUserData>((Map<String, dynamic> e) =>
          MyBlogListDataUserData.fromJson(e)).toList() as M;
    }
    if (<MyNewsEntity>[] is M) {
      return data.map<MyNewsEntity>((Map<String, dynamic> e) =>
          MyNewsEntity.fromJson(e)).toList() as M;
    }
    if (<MyNewsData>[] is M) {
      return data.map<MyNewsData>((Map<String, dynamic> e) =>
          MyNewsData.fromJson(e)).toList() as M;
    }
    if (<MyNewsDataUserData>[] is M) {
      return data.map<MyNewsDataUserData>((Map<String, dynamic> e) =>
          MyNewsDataUserData.fromJson(e)).toList() as M;
    }
    if (<MyPostListEntity>[] is M) {
      return data.map<MyPostListEntity>((Map<String, dynamic> e) =>
          MyPostListEntity.fromJson(e)).toList() as M;
    }
    if (<MyPostListData>[] is M) {
      return data.map<MyPostListData>((Map<String, dynamic> e) =>
          MyPostListData.fromJson(e)).toList() as M;
    }
    if (<MyPostListDataUserData>[] is M) {
      return data.map<MyPostListDataUserData>((Map<String, dynamic> e) =>
          MyPostListDataUserData.fromJson(e)).toList() as M;
    }
    if (<MyQuestionEntity>[] is M) {
      return data.map<MyQuestionEntity>((Map<String, dynamic> e) =>
          MyQuestionEntity.fromJson(e)).toList() as M;
    }
    if (<MyQuestionQuestions>[] is M) {
      return data.map<MyQuestionQuestions>((Map<String, dynamic> e) =>
          MyQuestionQuestions.fromJson(e)).toList() as M;
    }
    if (<MyQuestionQuestionsUserData>[] is M) {
      return data.map<MyQuestionQuestionsUserData>((Map<String, dynamic> e) =>
          MyQuestionQuestionsUserData.fromJson(e)).toList() as M;
    }
    if (<NewsLikeListEntity>[] is M) {
      return data.map<NewsLikeListEntity>((Map<String, dynamic> e) =>
          NewsLikeListEntity.fromJson(e)).toList() as M;
    }
    if (<NewsLikeListData>[] is M) {
      return data.map<NewsLikeListData>((Map<String, dynamic> e) =>
          NewsLikeListData.fromJson(e)).toList() as M;
    }
    if (<NewsLikeListDataUserData>[] is M) {
      return data.map<NewsLikeListDataUserData>((Map<String, dynamic> e) =>
          NewsLikeListDataUserData.fromJson(e)).toList() as M;
    }
    if (<PostBookmarkEntity>[] is M) {
      return data.map<PostBookmarkEntity>((Map<String, dynamic> e) =>
          PostBookmarkEntity.fromJson(e)).toList() as M;
    }
    if (<PostLikeEntity>[] is M) {
      return data.map<PostLikeEntity>((Map<String, dynamic> e) =>
          PostLikeEntity.fromJson(e)).toList() as M;
    }
    if (<PostLikeListEntity>[] is M) {
      return data.map<PostLikeListEntity>((Map<String, dynamic> e) =>
          PostLikeListEntity.fromJson(e)).toList() as M;
    }
    if (<PostLikeListData>[] is M) {
      return data.map<PostLikeListData>((Map<String, dynamic> e) =>
          PostLikeListData.fromJson(e)).toList() as M;
    }
    if (<PostLikeListDataUserData>[] is M) {
      return data.map<PostLikeListDataUserData>((Map<String, dynamic> e) =>
          PostLikeListDataUserData.fromJson(e)).toList() as M;
    }
    if (<QuestionLikeListEntity>[] is M) {
      return data.map<QuestionLikeListEntity>((Map<String, dynamic> e) =>
          QuestionLikeListEntity.fromJson(e)).toList() as M;
    }
    if (<QuestionLikeListData>[] is M) {
      return data.map<QuestionLikeListData>((Map<String, dynamic> e) =>
          QuestionLikeListData.fromJson(e)).toList() as M;
    }
    if (<QuestionLikeListDataUserData>[] is M) {
      return data.map<QuestionLikeListDataUserData>((Map<String, dynamic> e) =>
          QuestionLikeListDataUserData.fromJson(e)).toList() as M;
    }
    if (<RemainingClassifiedCountEntity>[] is M) {
      return data.map<RemainingClassifiedCountEntity>((
          Map<String, dynamic> e) => RemainingClassifiedCountEntity.fromJson(e))
          .toList() as M;
    }
    if (<ResentOtpRegisterEntity>[] is M) {
      return data.map<ResentOtpRegisterEntity>((Map<String, dynamic> e) =>
          ResentOtpRegisterEntity.fromJson(e)).toList() as M;
    }
    if (<SaveClassifiedEntity>[] is M) {
      return data.map<SaveClassifiedEntity>((Map<String, dynamic> e) =>
          SaveClassifiedEntity.fromJson(e)).toList() as M;
    }
    if (<SaveClassifiedData>[] is M) {
      return data.map<SaveClassifiedData>((Map<String, dynamic> e) =>
          SaveClassifiedData.fromJson(e)).toList() as M;
    }
    if (<SaveCompanyEntity>[] is M) {
      return data.map<SaveCompanyEntity>((Map<String, dynamic> e) =>
          SaveCompanyEntity.fromJson(e)).toList() as M;
    }
    if (<SaveCompanyUserData>[] is M) {
      return data.map<SaveCompanyUserData>((Map<String, dynamic> e) =>
          SaveCompanyUserData.fromJson(e)).toList() as M;
    }
    if (<TermsandConditionEntity>[] is M) {
      return data.map<TermsandConditionEntity>((Map<String, dynamic> e) =>
          TermsandConditionEntity.fromJson(e)).toList() as M;
    }
    if (<UpdateBlogEntity>[] is M) {
      return data.map<UpdateBlogEntity>((Map<String, dynamic> e) =>
          UpdateBlogEntity.fromJson(e)).toList() as M;
    }
    if (<UpdateBlogData>[] is M) {
      return data.map<UpdateBlogData>((Map<String, dynamic> e) =>
          UpdateBlogData.fromJson(e)).toList() as M;
    }
    if (<UpdateClassifiedEntity>[] is M) {
      return data.map<UpdateClassifiedEntity>((Map<String, dynamic> e) =>
          UpdateClassifiedEntity.fromJson(e)).toList() as M;
    }
    if (<UpdateClassifiedData>[] is M) {
      return data.map<UpdateClassifiedData>((Map<String, dynamic> e) =>
          UpdateClassifiedData.fromJson(e)).toList() as M;
    }
    if (<UpdateNewsEntity>[] is M) {
      return data.map<UpdateNewsEntity>((Map<String, dynamic> e) =>
          UpdateNewsEntity.fromJson(e)).toList() as M;
    }
    if (<UpdateNewsData>[] is M) {
      return data.map<UpdateNewsData>((Map<String, dynamic> e) =>
          UpdateNewsData.fromJson(e)).toList() as M;
    }
    if (<UpdatePhoneNoEntity>[] is M) {
      return data.map<UpdatePhoneNoEntity>((Map<String, dynamic> e) =>
          UpdatePhoneNoEntity.fromJson(e)).toList() as M;
    }
    if (<UpdatePhoneVerifyOtpEntity>[] is M) {
      return data.map<UpdatePhoneVerifyOtpEntity>((Map<String, dynamic> e) =>
          UpdatePhoneVerifyOtpEntity.fromJson(e)).toList() as M;
    }
    if (<UpdatePostEntity>[] is M) {
      return data.map<UpdatePostEntity>((Map<String, dynamic> e) =>
          UpdatePostEntity.fromJson(e)).toList() as M;
    }
    if (<UpdatePostUserpost>[] is M) {
      return data.map<UpdatePostUserpost>((Map<String, dynamic> e) =>
          UpdatePostUserpost.fromJson(e)).toList() as M;
    }
    if (<UpdateSocialMediaEntity>[] is M) {
      return data.map<UpdateSocialMediaEntity>((Map<String, dynamic> e) =>
          UpdateSocialMediaEntity.fromJson(e)).toList() as M;
    }
    if (<UpdateSocialMediaUserProfile>[] is M) {
      return data.map<UpdateSocialMediaUserProfile>((Map<String, dynamic> e) =>
          UpdateSocialMediaUserProfile.fromJson(e)).toList() as M;
    }
    if (<UpdateUserProfileEntity>[] is M) {
      return data.map<UpdateUserProfileEntity>((Map<String, dynamic> e) =>
          UpdateUserProfileEntity.fromJson(e)).toList() as M;
    }
    if (<UpdateUserProfileUserProfile>[] is M) {
      return data.map<UpdateUserProfileUserProfile>((Map<String, dynamic> e) =>
          UpdateUserProfileUserProfile.fromJson(e)).toList() as M;
    }
    if (<UserRegisterEntityEntity>[] is M) {
      return data.map<UserRegisterEntityEntity>((Map<String, dynamic> e) =>
          UserRegisterEntityEntity.fromJson(e)).toList() as M;
    }
    if (<VerifyPhoneOtpEntity>[] is M) {
      return data.map<VerifyPhoneOtpEntity>((Map<String, dynamic> e) =>
          VerifyPhoneOtpEntity.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (AddAnswerEntity).toString(): AddAnswerEntity.fromJson,
    (AddAnswerAnswer).toString(): AddAnswerAnswer.fromJson,
    (AddBlogEntity).toString(): AddBlogEntity.fromJson,
    (AddBlogData).toString(): AddBlogData.fromJson,
    (AddNewsEntity).toString(): AddNewsEntity.fromJson,
    (AddNewsData).toString(): AddNewsData.fromJson,
    (AddPostEntity).toString(): AddPostEntity.fromJson,
    (AddPostUserpost).toString(): AddPostUserpost.fromJson,
    (BlogBookmarkEntity).toString(): BlogBookmarkEntity.fromJson,
    (BlogLikeListEntity).toString(): BlogLikeListEntity.fromJson,
    (BlogLikeListData).toString(): BlogLikeListData.fromJson,
    (BlogLikeListDataUserData).toString(): BlogLikeListDataUserData.fromJson,
    (BookmarkCompanyEntity).toString(): BookmarkCompanyEntity.fromJson,
    (BookmarkNewsEntity).toString(): BookmarkNewsEntity.fromJson,
    (BookmarkUserEntity).toString(): BookmarkUserEntity.fromJson,
    (ChangeEmailEntity).toString(): ChangeEmailEntity.fromJson,
    (ChangePasswordEntity).toString(): ChangePasswordEntity.fromJson,
    (ClassifiedLikeListEntity).toString(): ClassifiedLikeListEntity.fromJson,
    (ClassifiedLikeListData).toString(): ClassifiedLikeListData.fromJson,
    (ClassifiedLikeListDataUserData).toString(): ClassifiedLikeListDataUserData
        .fromJson,
    (CountViewQuestionEntity).toString(): CountViewQuestionEntity.fromJson,
    (DeleteClassifiedEntity).toString(): DeleteClassifiedEntity.fromJson,
    (DeleteNewsEntity).toString(): DeleteNewsEntity.fromJson,
    (DeleteUserPostEntity).toString(): DeleteUserPostEntity.fromJson,
    (DomesticPhoneotpEntity).toString(): DomesticPhoneotpEntity.fromJson,
    (EmailOtpEntity).toString(): EmailOtpEntity.fromJson,
    (EmailVerifyEntity).toString(): EmailVerifyEntity.fromJson,
    (EmailVerifyOtpEntity).toString(): EmailVerifyOtpEntity.fromJson,
    (ForeignphoneOtpEntity).toString(): ForeignphoneOtpEntity.fromJson,
    (ForgotPasswordEntity).toString(): ForgotPasswordEntity.fromJson,
    (GetAdminCompanyEntity).toString(): GetAdminCompanyEntity.fromJson,
    (GetAdminCompanyData).toString(): GetAdminCompanyData.fromJson,
    (GetAnswersEntity).toString(): GetAnswersEntity.fromJson,
    (GetAnswersAnswers).toString(): GetAnswersAnswers.fromJson,
    (GetAnswersAnswersUserData).toString(): GetAnswersAnswersUserData.fromJson,
    (GetBannerEntity).toString(): GetBannerEntity.fromJson,
    (GetBannerData).toString(): GetBannerData.fromJson,
    (GetBlogListEntity).toString(): GetBlogListEntity.fromJson,
    (GetBlogListData).toString(): GetBlogListData.fromJson,
    (GetBlogListDataUserData).toString(): GetBlogListDataUserData.fromJson,
    (GetCategoryEntity).toString(): GetCategoryEntity.fromJson,
    (GetCategoryCategory).toString(): GetCategoryCategory.fromJson,
    (GetClassifiedEntity).toString(): GetClassifiedEntity.fromJson,
    (GetClassifiedData).toString(): GetClassifiedData.fromJson,
    (GetClassifiedDataUserData).toString(): GetClassifiedDataUserData.fromJson,
    (GetCompanyEntity).toString(): GetCompanyEntity.fromJson,
    (GetMlmDatabaseEntity).toString(): GetMlmDatabaseEntity.fromJson,
    (GetMlmDatabaseData).toString(): GetMlmDatabaseData.fromJson,
    (GetNewsListEntity).toString(): GetNewsListEntity.fromJson,
    (GetNewsListData).toString(): GetNewsListData.fromJson,
    (GetNewsListDataUserData).toString(): GetNewsListDataUserData.fromJson,
    (GetPlanListEntity).toString(): GetPlanListEntity.fromJson,
    (GetPlanListPlan).toString(): GetPlanListPlan.fromJson,
    (GetQuestionListEntity).toString(): GetQuestionListEntity.fromJson,
    (GetQuestionListQuestions).toString(): GetQuestionListQuestions.fromJson,
    (GetQuestionListQuestionsUserData)
        .toString(): GetQuestionListQuestionsUserData.fromJson,
    (GetSubCategoryEntity).toString(): GetSubCategoryEntity.fromJson,
    (GetSubCategoryCategory).toString(): GetSubCategoryCategory.fromJson,
    (GetUserProfileEntity).toString(): GetUserProfileEntity.fromJson,
    (GetUserProfileUserProfile).toString(): GetUserProfileUserProfile.fromJson,
    (GetUserTypeEntity).toString(): GetUserTypeEntity.fromJson,
    (GetUserTypeUsertype).toString(): GetUserTypeUsertype.fromJson,
    (GetVideoListEntity).toString(): GetVideoListEntity.fromJson,
    (GetVideoListVideos).toString(): GetVideoListVideos.fromJson,
    (LIkedBlogEntity).toString(): LIkedBlogEntity.fromJson,
    (LikedNewsEntity).toString(): LikedNewsEntity.fromJson,
    (LikedUserEntity).toString(): LikedUserEntity.fromJson,
    (LoginEntity).toString(): LoginEntity.fromJson,
    (ManageClassifiedEntity).toString(): ManageClassifiedEntity.fromJson,
    (ManageClassifiedData).toString(): ManageClassifiedData.fromJson,
    (ManageClassifiedDataUserData).toString(): ManageClassifiedDataUserData
        .fromJson,
    (MlmLikeCompanyEntity).toString(): MlmLikeCompanyEntity.fromJson,
    (MyBlogListEntity).toString(): MyBlogListEntity.fromJson,
    (MyBlogListData).toString(): MyBlogListData.fromJson,
    (MyBlogListDataUserData).toString(): MyBlogListDataUserData.fromJson,
    (MyNewsEntity).toString(): MyNewsEntity.fromJson,
    (MyNewsData).toString(): MyNewsData.fromJson,
    (MyNewsDataUserData).toString(): MyNewsDataUserData.fromJson,
    (MyPostListEntity).toString(): MyPostListEntity.fromJson,
    (MyPostListData).toString(): MyPostListData.fromJson,
    (MyPostListDataUserData).toString(): MyPostListDataUserData.fromJson,
    (MyQuestionEntity).toString(): MyQuestionEntity.fromJson,
    (MyQuestionQuestions).toString(): MyQuestionQuestions.fromJson,
    (MyQuestionQuestionsUserData).toString(): MyQuestionQuestionsUserData
        .fromJson,
    (NewsLikeListEntity).toString(): NewsLikeListEntity.fromJson,
    (NewsLikeListData).toString(): NewsLikeListData.fromJson,
    (NewsLikeListDataUserData).toString(): NewsLikeListDataUserData.fromJson,
    (PostBookmarkEntity).toString(): PostBookmarkEntity.fromJson,
    (PostLikeEntity).toString(): PostLikeEntity.fromJson,
    (PostLikeListEntity).toString(): PostLikeListEntity.fromJson,
    (PostLikeListData).toString(): PostLikeListData.fromJson,
    (PostLikeListDataUserData).toString(): PostLikeListDataUserData.fromJson,
    (QuestionLikeListEntity).toString(): QuestionLikeListEntity.fromJson,
    (QuestionLikeListData).toString(): QuestionLikeListData.fromJson,
    (QuestionLikeListDataUserData).toString(): QuestionLikeListDataUserData
        .fromJson,
    (RemainingClassifiedCountEntity).toString(): RemainingClassifiedCountEntity
        .fromJson,
    (ResentOtpRegisterEntity).toString(): ResentOtpRegisterEntity.fromJson,
    (SaveClassifiedEntity).toString(): SaveClassifiedEntity.fromJson,
    (SaveClassifiedData).toString(): SaveClassifiedData.fromJson,
    (SaveCompanyEntity).toString(): SaveCompanyEntity.fromJson,
    (SaveCompanyUserData).toString(): SaveCompanyUserData.fromJson,
    (TermsandConditionEntity).toString(): TermsandConditionEntity.fromJson,
    (UpdateBlogEntity).toString(): UpdateBlogEntity.fromJson,
    (UpdateBlogData).toString(): UpdateBlogData.fromJson,
    (UpdateClassifiedEntity).toString(): UpdateClassifiedEntity.fromJson,
    (UpdateClassifiedData).toString(): UpdateClassifiedData.fromJson,
    (UpdateNewsEntity).toString(): UpdateNewsEntity.fromJson,
    (UpdateNewsData).toString(): UpdateNewsData.fromJson,
    (UpdatePhoneNoEntity).toString(): UpdatePhoneNoEntity.fromJson,
    (UpdatePhoneVerifyOtpEntity).toString(): UpdatePhoneVerifyOtpEntity
        .fromJson,
    (UpdatePostEntity).toString(): UpdatePostEntity.fromJson,
    (UpdatePostUserpost).toString(): UpdatePostUserpost.fromJson,
    (UpdateSocialMediaEntity).toString(): UpdateSocialMediaEntity.fromJson,
    (UpdateSocialMediaUserProfile).toString(): UpdateSocialMediaUserProfile
        .fromJson,
    (UpdateUserProfileEntity).toString(): UpdateUserProfileEntity.fromJson,
    (UpdateUserProfileUserProfile).toString(): UpdateUserProfileUserProfile
        .fromJson,
    (UserRegisterEntityEntity).toString(): UserRegisterEntityEntity.fromJson,
    (VerifyPhoneOtpEntity).toString(): VerifyPhoneOtpEntity.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}